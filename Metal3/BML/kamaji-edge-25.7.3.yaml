---
# Source: kamaji/templates/rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kamaji-controller-manager
  labels:
    helm.sh/chart: kamaji-0.0.0_latest
    app.kubernetes.io/name: kamaji
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: controller-manager
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
  namespace: kamaji-system
---
# Source: kamaji/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  creationTimestamp: null
  name: kamaji-manager-role
rules:
- apiGroups:
    - apps
  resources:
    - deployments
  verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
- apiGroups:
    - batch
  resources:
    - jobs
  verbs:
    - create
    - delete
    - get
    - list
    - watch
- apiGroups:
    - ""
  resources:
    - configmaps
    - secrets
    - services
  verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
- apiGroups:
    - kamaji.clastix.io
  resources:
    - datastores
    - tenantcontrolplanes
  verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
- apiGroups:
    - kamaji.clastix.io
  resources:
    - datastores/status
    - tenantcontrolplanes/status
  verbs:
    - get
    - patch
    - update
- apiGroups:
    - kamaji.clastix.io
  resources:
    - tenantcontrolplanes/finalizers
  verbs:
    - update
- apiGroups:
    - networking.k8s.io
  resources:
    - ingresses
  verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
---
# Source: kamaji/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kamaji-metrics-reader
rules:
- nonResourceURLs:
  - /metrics
  verbs:
  - get
---
# Source: kamaji/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kamaji-proxy-role
rules:
- apiGroups:
  - authentication.k8s.io
  resources:
  - tokenreviews
  verbs:
  - create
- apiGroups:
  - authorization.k8s.io
  resources:
  - subjectaccessreviews
  verbs:
  - create
---
# Source: kamaji/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kamaji-manager-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kamaji-manager-role
subjects:
- kind: ServiceAccount
  name: kamaji-controller-manager
  namespace: kamaji-system
---
# Source: kamaji/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kamaji-proxy-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kamaji-proxy-role
subjects:
- kind: ServiceAccount
  name: kamaji-controller-manager
  namespace: kamaji-system
---
# Source: kamaji/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: kamaji-leader-election-role
  namespace: kamaji-system
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
---
# Source: kamaji/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: kamaji-leader-election-rolebinding
  namespace: kamaji-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: kamaji-leader-election-role
subjects:
- kind: ServiceAccount
  name: kamaji-controller-manager
  namespace: kamaji-system
---
# Source: kamaji/charts/kamaji-etcd/templates/etcd_service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    helm.sh/chart: kamaji-etcd-0.11.0
    app.kubernetes.io/name: kamaji-etcd
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "3.5.17"
    app.kubernetes.io/managed-by: Helm
  name: kamaji-etcd
  namespace: kamaji-system
spec:
  clusterIP: None
  ports:
    - port: 2379
      name: client
    - port: 2380
      name: peer
    - port: 2381
      name: metrics
  selector:
    app.kubernetes.io/name: kamaji-etcd
    app.kubernetes.io/instance: release-name
---
# Source: kamaji/templates/service_metrics.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    helm.sh/chart: kamaji-0.0.0_latest
    app.kubernetes.io/name: kamaji
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: metrics
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
  name: release-name-kamaji-metrics-service
  namespace: kamaji-system
spec:
  ports:
    - port: 8080
      name: metrics
      protocol: TCP
      targetPort: metrics
  selector:
    app.kubernetes.io/name: kamaji
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: controller-manager
---
# Source: kamaji/templates/service_webhook.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    helm.sh/chart: kamaji-0.0.0_latest
    app.kubernetes.io/name: kamaji
    app.kubernetes.io/instance: webhook-service
    app.kubernetes.io/component: webhook
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
  name: release-name-kamaji-webhook-service
  namespace: kamaji-system
spec:
  ports:
    - port: 443
      protocol: TCP
      name: webhook-server
      targetPort: webhook-server
  selector:
    app.kubernetes.io/name: kamaji
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: controller-manager
---
# Source: kamaji/templates/controller.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-kamaji
  labels:
    helm.sh/chart: kamaji-0.0.0_latest
    app.kubernetes.io/name: kamaji
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: controller-manager
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
  namespace: kamaji-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: kamaji
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: controller-manager
  template:
    metadata:
      labels:
        app.kubernetes.io/name: kamaji
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/component: controller-manager
    spec:
      securityContext:
        runAsNonRoot: true
      serviceAccountName: kamaji-controller-manager
      containers:
      - args:
        - manager
        - --health-probe-bind-address=:8081
        - --leader-elect
        - --metrics-bind-address=:8080
        - --tmp-directory=/tmp/kamaji
        - --datastore=default
        env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: SERVICE_ACCOUNT
            valueFrom:
              fieldRef:
                fieldPath: spec.serviceAccountName
        image: "clastix/kamaji:edge-25.7.3"
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /healthz
            port: healthcheck
          initialDelaySeconds: 15
          periodSeconds: 20
        name: manager
        ports:
        - containerPort: 9443
          name: webhook-server
          protocol: TCP
        - containerPort: 8080
          name: metrics
          protocol: TCP
        - containerPort: 8081
          name: healthcheck
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /readyz
            port: healthcheck
          initialDelaySeconds: 5
          periodSeconds: 10
        resources:
            limits:
              cpu: 200m
              memory: 100Mi
            requests:
              cpu: 100m
              memory: 20Mi
        securityContext:
            allowPrivilegeEscalation: false
        volumeMounts:
          - mountPath: /tmp
            name: tmp
          - mountPath: /tmp/k8s-webhook-server/serving-certs
            name: cert
            readOnly: true
      terminationGracePeriodSeconds: 10
      volumes:
        - name: tmp
          emptyDir:
            medium: Memory
        - name: cert
          secret:
            defaultMode: 420
            secretName: release-name-kamaji-webhook-server-cert
---
# Source: kamaji/charts/kamaji-etcd/templates/etcd_sts.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    helm.sh/chart: kamaji-etcd-0.11.0
    app.kubernetes.io/name: kamaji-etcd
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "3.5.17"
    app.kubernetes.io/managed-by: Helm
  name: kamaji-etcd
  namespace: kamaji-system
spec:
  serviceName: kamaji-etcd
  selector:
    matchLabels:
      app.kubernetes.io/name: kamaji-etcd
      app.kubernetes.io/instance: release-name
  replicas: 3
  template:
    metadata:
      name: etcd
      labels:
        app.kubernetes.io/name: kamaji-etcd
        app.kubernetes.io/instance: release-name
        application: kamaji-etcd
      annotations:      
    spec:
      volumes:
        - name: certs
          secret:
            secretName: kamaji-etcd-certs
      containers:
        - name: etcd
          image: quay.io/coreos/etcd:v3.5.17
          imagePullPolicy: IfNotPresent
          securityContext:
            null
          ports:
            - containerPort: 2379
              name: client
            - containerPort: 2380
              name: peer
            - containerPort: 2381
              name: metrics
          volumeMounts:
            - name: data
              mountPath: /var/run/etcd
            - name: certs
              mountPath: /etc/etcd/pki
          command:
            - etcd
            - --data-dir=/var/run/etcd
            - --name=$(POD_NAME)
            - --initial-cluster-state=new
            - --initial-cluster=kamaji-etcd-0=https://kamaji-etcd-0.kamaji-etcd.kamaji-system.svc.cluster.local:2380,kamaji-etcd-1=https://kamaji-etcd-1.kamaji-etcd.kamaji-system.svc.cluster.local:2380,kamaji-etcd-2=https://kamaji-etcd-2.kamaji-etcd.kamaji-system.svc.cluster.local:2380
            - --initial-advertise-peer-urls=https://$(POD_NAME).kamaji-etcd.$(POD_NAMESPACE).svc.cluster.local:2380
            - --advertise-client-urls=https://$(POD_NAME).kamaji-etcd.$(POD_NAMESPACE).svc.cluster.local:2379
            - --initial-cluster-token=kamaji
            - --listen-client-urls=https://0.0.0.0:2379
            - --listen-metrics-urls=http://0.0.0.0:2381
            - --listen-peer-urls=https://0.0.0.0:2380
            - --client-cert-auth=true
            - --peer-client-cert-auth=true
            - --trusted-ca-file=/etc/etcd/pki/ca.crt
            - --cert-file=/etc/etcd/pki/server.pem
            - --key-file=/etc/etcd/pki/server-key.pem
            - --peer-trusted-ca-file=/etc/etcd/pki/ca.crt
            - --peer-cert-file=/etc/etcd/pki/peer.pem
            - --peer-key-file=/etc/etcd/pki/peer-key.pem
            - --auto-compaction-mode=periodic
            - --auto-compaction-retention=5m
            - --snapshot-count=10000
            - --quota-backend-bytes=8589934592
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          resources:
            limits: {}
            requests: {}
      priorityClassName:
        system-cluster-critical
      nodeSelector:
        kubernetes.io/os: linux
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: data
      spec:
        storageClassName: 
        accessModes:
        - "ReadWriteOnce"
        resources:
          requests:
            storage: 8Gi
---
# Source: kamaji/templates/certmanager_certificate.yaml
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  labels:
    helm.sh/chart: kamaji-0.0.0_latest
    app.kubernetes.io/name: kamaji
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: certificate
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
  name: release-name-kamaji-serving-cert
  namespace: kamaji-system
spec:
  dnsNames:
    - release-name-kamaji-webhook-service.kamaji-system.svc
    - release-name-kamaji-webhook-service.kamaji-system.svc.cluster.local
  issuerRef:
    kind: Issuer
    name: kamaji-selfsigned-issuer
  secretName: release-name-kamaji-webhook-server-cert
---
# Source: kamaji/charts/kamaji-etcd/templates/etcd_datastore.yaml
apiVersion: kamaji.clastix.io/v1alpha1
kind: DataStore
metadata:
  name: default
  labels:
    helm.sh/chart: kamaji-etcd-0.11.0
    app.kubernetes.io/name: kamaji-etcd
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "3.5.17"
    app.kubernetes.io/managed-by: Helm
spec:
  driver: etcd
  endpoints:
    - kamaji-etcd-0.kamaji-etcd.kamaji-system.svc.cluster.local:2379
    - kamaji-etcd-1.kamaji-etcd.kamaji-system.svc.cluster.local:2379
    - kamaji-etcd-2.kamaji-etcd.kamaji-system.svc.cluster.local:2379
    
  tlsConfig:
    certificateAuthority:
      certificate:
        secretReference:
          keyPath: ca.crt
          name: kamaji-etcd-certs
          namespace: kamaji-system
      privateKey:
        secretReference:
          keyPath: ca.key
          name: kamaji-etcd-certs
          namespace: kamaji-system
    clientCertificate:
      certificate:
        secretReference:
          keyPath: tls.crt
          name: kamaji-etcd-root-client-certs
          namespace: kamaji-system
      privateKey:
        secretReference:
          keyPath: tls.key
          name: kamaji-etcd-root-client-certs
          namespace: kamaji-system
---
# Source: kamaji/templates/certmanager_issuer.yaml
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  labels:
    helm.sh/chart: kamaji-0.0.0_latest
    app.kubernetes.io/name: kamaji
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: issuer
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
  name: kamaji-selfsigned-issuer
  namespace: kamaji-system
spec:
  selfSigned: {}
---
# Source: kamaji/templates/mutatingwebhookconfiguration.yaml
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  annotations:
    cert-manager.io/inject-ca-from: kamaji-system/release-name-kamaji-serving-cert
  labels:
    helm.sh/chart: kamaji-0.0.0_latest
    app.kubernetes.io/name: kamaji
    app.kubernetes.io/instance: mutating-webhook-configuration
    app.kubernetes.io/component: controller-manager
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
  name: kamaji-mutating-webhook-configuration
webhooks:
- admissionReviewVersions:
    - v1
  clientConfig:
    service:
      name: 'release-name-kamaji-webhook-service'
      namespace: 'kamaji-system'
      path: /mutate-kamaji-clastix-io-v1alpha1-tenantcontrolplane
  failurePolicy: Fail
  name: mtenantcontrolplane.kb.io
  rules:
    - apiGroups:
        - kamaji.clastix.io
      apiVersions:
        - v1alpha1
      operations:
        - CREATE
        - UPDATE
      resources:
        - tenantcontrolplanes
  sideEffects: None
---
# Source: kamaji/templates/validatingwebhookconfiguration.yaml
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  annotations:
    cert-manager.io/inject-ca-from: kamaji-system/release-name-kamaji-serving-cert
  labels:
    helm.sh/chart: kamaji-0.0.0_latest
    app.kubernetes.io/name: kamaji
    app.kubernetes.io/instance: validating-webhook-configuration
    app.kubernetes.io/component: controller-manager
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
  name: kamaji-validating-webhook-configuration
webhooks:
- admissionReviewVersions:
    - v1
  clientConfig:
    service:
      name: 'release-name-kamaji-webhook-service'
      namespace: 'kamaji-system'
      path: /telemetry
  failurePolicy: Ignore
  name: telemetry.kamaji.clastix.io
  rules:
    - apiGroups:
        - kamaji.clastix.io
      apiVersions:
        - v1alpha1
      operations:
        - CREATE
        - UPDATE
        - DELETE
      resources:
        - tenantcontrolplanes
  sideEffects: None
- admissionReviewVersions:
    - v1
  clientConfig:
    service:
      name: 'release-name-kamaji-webhook-service'
      namespace: 'kamaji-system'
      path: /validate-kamaji-clastix-io-v1alpha1-datastore
  failurePolicy: Fail
  name: vdatastore.kb.io
  rules:
    - apiGroups:
        - kamaji.clastix.io
      apiVersions:
        - v1alpha1
      operations:
        - CREATE
        - UPDATE
        - DELETE
      resources:
        - datastores
  sideEffects: None
- admissionReviewVersions:
    - v1
  clientConfig:
    service:
      name: 'release-name-kamaji-webhook-service'
      namespace: 'kamaji-system'
      path: /validate--v1-secret
  failurePolicy: Ignore
  name: vdatastoresecrets.kb.io
  rules:
    - apiGroups:
        - ""
      apiVersions:
        - v1
      operations:
        - DELETE
      resources:
        - secrets
  sideEffects: None
- admissionReviewVersions:
    - v1
  clientConfig:
    service:
      name: 'release-name-kamaji-webhook-service'
      namespace: 'kamaji-system'
      path: /validate-kamaji-clastix-io-v1alpha1-tenantcontrolplane
  failurePolicy: Fail
  name: vtenantcontrolplane.kb.io
  rules:
    - apiGroups:
        - kamaji.clastix.io
      apiVersions:
        - v1alpha1
      operations:
        - CREATE
        - UPDATE
      resources:
        - tenantcontrolplanes
  sideEffects: None
---
# Source: kamaji/charts/kamaji-etcd/templates/etcd_sa.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kamaji-etcd
  labels:
    helm.sh/chart: kamaji-etcd-0.11.0
    app.kubernetes.io/name: kamaji-etcd
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "3.5.17"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-failed"
    "helm.sh/hook-weight": "0"
---
# Source: kamaji/charts/kamaji-etcd/templates/etcd_cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "5"
  labels:
    helm.sh/chart: kamaji-etcd-0.11.0
    app.kubernetes.io/name: kamaji-etcd
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "3.5.17"
    app.kubernetes.io/managed-by: Helm
  name: kamaji-etcd-csr
  namespace: kamaji-system
data:
  ca-csr.json: |-
    {
      "CN": "Clastix CA",
      "key": {
        "algo": "rsa",
        "size": 2048
      },
      "names": [
        {
          "C": "IT",
          "ST": "Italy",
          "L": "Milan"
        }
      ]
    }
  config.json: |-
    {
      "signing": {
        "default": {
          "expiry": "8760h"
        },
        "profiles": {
          "server-authentication": {
            "usages": ["signing", "key encipherment", "server auth"],
            "expiry": "8760h"
          },
          "client-authentication": {
            "usages": ["signing", "key encipherment", "client auth"],
            "expiry": "8760h"
          },
          "peer-authentication": {
            "usages": ["signing", "key encipherment", "server auth", "client auth"],
            "expiry": "8760h"
          }
        }
      }
    }
  server-csr.json: |-
    {
      "CN": "etcd",
      "key": {
        "algo": "rsa",
        "size": 2048
      },
      "hosts": ["kamaji-etcd-0.kamaji-etcd.kamaji-system.svc.cluster.local","kamaji-etcd-1.kamaji-etcd.kamaji-system.svc.cluster.local","kamaji-etcd-2.kamaji-etcd.kamaji-system.svc.cluster.local",
        "etcd-server.kamaji-system.svc.cluster.local",
        "etcd-server.kamaji-system.svc",
        "etcd-server",
        "127.0.0.1"
      ]
    }
  peer-csr.json: |-
    {
      "CN": "etcd",
      "key": {
        "algo": "rsa",
        "size": 2048
      },
      "hosts": ["kamaji-etcd-0",
        "kamaji-etcd-0.kamaji-etcd",
        "kamaji-etcd-0.kamaji-etcd.kamaji-system.svc",
        "kamaji-etcd-0.kamaji-etcd.kamaji-system.svc.cluster.local","kamaji-etcd-1",
        "kamaji-etcd-1.kamaji-etcd",
        "kamaji-etcd-1.kamaji-etcd.kamaji-system.svc",
        "kamaji-etcd-1.kamaji-etcd.kamaji-system.svc.cluster.local","kamaji-etcd-2",
        "kamaji-etcd-2.kamaji-etcd",
        "kamaji-etcd-2.kamaji-etcd.kamaji-system.svc",
        "kamaji-etcd-2.kamaji-etcd.kamaji-system.svc.cluster.local",
        "127.0.0.1"
      ]
    }
  root-client-csr.json: |-
    {
      "CN": "root",
      "key": {
        "algo": "rsa",
        "size": 2048
      },
      "names": [
        {
          "O": "system:masters"
        }
      ]
    }
---
# Source: kamaji/charts/kamaji-etcd/templates/etcd_rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  annotations:
    "helm.sh/hook": pre-install,post-install,pre-delete
    "helm.sh/hook-delete-policy": "hook-succeeded,before-hook-creation,hook-failed"
    "helm.sh/hook-weight": "5"
  labels:
    helm.sh/chart: kamaji-etcd-0.11.0
    app.kubernetes.io/name: kamaji-etcd
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "3.5.17"
    app.kubernetes.io/managed-by: Helm
  name: kamaji-etcd-gen-certs-role
  namespace: kamaji-system
rules:
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - get
      - patch
      - delete
    resourceNames:
      - kamaji-etcd-certs
      - kamaji-etcd-root-client-certs
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - create
  - apiGroups:
      - apps
    resources:
      - statefulsets
    verbs:
      - get
      - list
      - watch
      - patch
    resourceNames:
      - kamaji-etcd
---
# Source: kamaji/charts/kamaji-etcd/templates/etcd_rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  annotations:
    "helm.sh/hook": pre-install,post-install,pre-delete
    "helm.sh/hook-delete-policy": "hook-succeeded,before-hook-creation,hook-failed"
    "helm.sh/hook-weight": "5"
  labels:
    helm.sh/chart: kamaji-etcd-0.11.0
    app.kubernetes.io/name: kamaji-etcd
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "3.5.17"
    app.kubernetes.io/managed-by: Helm
  name: kamaji-etcd-gen-certs-rolebinding
  namespace: kamaji-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: kamaji-etcd-gen-certs-role
subjects:
  - kind: ServiceAccount
    name: kamaji-etcd
    namespace: kamaji-system
---
# Source: kamaji/charts/kamaji-etcd/templates/etcd_job_postdelete.yaml
apiVersion: batch/v1
kind: Job
metadata:
  labels:
    helm.sh/chart: kamaji-etcd-0.11.0
    app.kubernetes.io/name: kamaji-etcd
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "3.5.17"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": pre-delete
    "helm.sh/hook-weight": "10"
    "helm.sh/hook-delete-policy": "hook-succeeded,before-hook-creation,hook-failed"
  name: "release-name-etcd-teardown"
  namespace: kamaji-system
spec:
  template:
    metadata:
      name: "release-name"
    spec:
      serviceAccountName: kamaji-etcd
      restartPolicy: Never
      nodeSelector:
        kubernetes.io/os: linux
      containers:
        - name: kubectl
          image: clastix/kubectl:v1.33
          command:
            - kubectl
            - --namespace=kamaji-system
            - delete
            - secret
            - --ignore-not-found=true
            - kamaji-etcd-certs
            - kamaji-etcd-root-client-certs
---
# Source: kamaji/charts/kamaji-etcd/templates/etcd_job_preinstall_1.yaml
apiVersion: batch/v1
kind: Job
metadata:
  labels:
    helm.sh/chart: kamaji-etcd-0.11.0
    app.kubernetes.io/name: kamaji-etcd
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "3.5.17"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "10"
    "helm.sh/hook-delete-policy": "hook-succeeded,before-hook-creation,hook-failed"
  name: "release-name-etcd-setup-1"
  namespace: kamaji-system
spec:
  template:
    metadata:
      name: "release-name"
    spec:
      serviceAccountName: kamaji-etcd
      restartPolicy: Never
      initContainers:
        - name: cfssl
          image: cfssl/cfssl:latest
          command:
            - bash
            - -c
            - |-
              cfssl gencert -initca /csr/ca-csr.json | cfssljson -bare /certs/ca &&
              mv /certs/ca.pem /certs/ca.crt && mv /certs/ca-key.pem /certs/ca.key &&
              cfssl gencert -ca=/certs/ca.crt -ca-key=/certs/ca.key -config=/csr/config.json -profile=peer-authentication /csr/peer-csr.json | cfssljson -bare /certs/peer &&
              cfssl gencert -ca=/certs/ca.crt -ca-key=/certs/ca.key -config=/csr/config.json -profile=peer-authentication /csr/server-csr.json | cfssljson -bare /certs/server &&
              cfssl gencert -ca=/certs/ca.crt -ca-key=/certs/ca.key -config=/csr/config.json -profile=client-authentication /csr/root-client-csr.json | cfssljson -bare /certs/root-client
          volumeMounts:
            - mountPath: /certs
              name: certs
            - mountPath: /csr
              name: csr
      containers:
        - name: kubectl
          image: clastix/kubectl:v1.33
          command: ["/bin/sh", "-c"]
          args:
            - |
              if kubectl get secret kamaji-etcd-certs --namespace=kamaji-system &>/dev/null; then
                echo "Secret kamaji-etcd-certs already exists"
              else
                echo "Creating secret kamaji-etcd-certs"
                kubectl --namespace=kamaji-system create secret generic kamaji-etcd-certs --from-file=/certs/ca.crt --from-file=/certs/ca.key --from-file=/certs/peer-key.pem --from-file=/certs/peer.pem --from-file=/certs/server-key.pem --from-file=/certs/server.pem
              fi
              if kubectl get secret kamaji-etcd-root-client-certs --namespace=kamaji-system &>/dev/null; then
                echo "Secret kamaji-etcd-root-client-certs already exists"
              else
                echo "Creating secret kamaji-etcd-root-client-certs"
                kubectl --namespace=kamaji-system create secret tls kamaji-etcd-root-client-certs --key=/certs/root-client-key.pem --cert=/certs/root-client.pem
              fi
          volumeMounts:
            - mountPath: /certs
              name: certs
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      nodeSelector:
        kubernetes.io/os: linux
      volumes:
        - name: csr
          configMap:
            name: kamaji-etcd-csr
        - name: certs
          emptyDir: {}
---
# Source: kamaji/charts/kamaji-etcd/templates/etcd_job_preinstall_2.yaml
apiVersion: batch/v1
kind: Job
metadata:
  labels:
    helm.sh/chart: kamaji-etcd-0.11.0
    app.kubernetes.io/name: kamaji-etcd
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "3.5.17"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "10"
    "helm.sh/hook-delete-policy": "hook-succeeded,before-hook-creation,hook-failed"
  name: "release-name-etcd-setup-2"
  namespace: kamaji-system
spec:
  backoffLimit: 12
  template:
    metadata:
      name: "release-name"
    spec:
      serviceAccountName: kamaji-etcd
      restartPolicy: Never
      initContainers:
        - name: kubectl
          image: clastix/kubectl:v1.33
          command:
          - sh
          - -c
          - kubectl --namespace=kamaji-system rollout status sts/kamaji-etcd --timeout=300s
      containers:
        - command:
          - bash
          - -c
          - |-
            etcdctl member list -w table
            if etcdctl user get root &>/dev/null; then
              echo "User already exists, nothing to do"
            else
              etcdctl user add --no-password=true root &&
              etcdctl role add root &&
              etcdctl user grant-role root root &&
              etcdctl auth enable
            fi
          env:
            - name: ETCDCTL_ENDPOINTS
              value: https://kamaji-etcd-0.kamaji-etcd.kamaji-system.svc.cluster.local:2379
            - name: ETCDCTL_CACERT
              value: /opt/certs/ca/ca.crt
            - name: ETCDCTL_CERT
              value: /opt/certs/root-certs/tls.crt
            - name: ETCDCTL_KEY
              value: /opt/certs/root-certs/tls.key
          image: quay.io/coreos/etcd:v3.5.6
          imagePullPolicy: IfNotPresent
          name: etcd-client
          volumeMounts:
            - name: root-certs
              mountPath: /opt/certs/root-certs
            - name: ca
              mountPath: /opt/certs/ca
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      nodeSelector:
        kubernetes.io/os: linux
      volumes:
        - name: root-certs
          secret:
            secretName: kamaji-etcd-root-client-certs
        - name: ca
          secret:
            secretName: kamaji-etcd-certs
